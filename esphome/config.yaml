
# for flashing : press boot button for 2-3 seconds before the serial connection initialize
# After OTA update, the EN (reset) button must be pressed to run firmware
      
external_components:
  # - source: 
      # type: git
      # url: https://github.com/nliaudat/meter-reader
      # ref: main
    # components: [meter_reader_tflite]
      
# external_components:    
  - source:
      type: local
      path: components 
    components: [meter_reader_tflite] 
      


############## General configuration

substitutions:

  name: s3cam-tflite #no special caracters
  friendly_name: "S3 camera tflite"
  id_prefix: "s3_cam_tflite" #if you have more than one board, it could be usefull to remane all the "id:prefix_xxxx" with a decicaded prefix
  revision: "1.2"
  
  # camera
  camera_pixel_format: JPEG # (cropping implementation is faster with RGB888 format) | Displays: RGB565, RGB888 | Cameras: YUV422, YUV420, RAW | Efficiency: Grayscale, YUV420, JPEG
  camera_resolution: 640x480 #800x600 #640x480 #https://esphome.io/components/esp32_camera.html
  camera_jpeg_quality: 10 # From 10 (best) to 63 (worst). | Must be 0 if non JPEG
  camera_max_framerate: 1fps
  camera_idle_framerate: 0.2fps
      
  #time
  TZ: "Europe/Zurich" #timezone
  reboot_days_of_week: "MON"
  reboot_hours: "5"
  reboot_minutes: "0"
  reboot_seconds: "0"

  
preferences:
  flash_write_interval: 60min
  

ota:
  - platform: esphome

safe_mode:

# network:
    # enable_ipv6: false
    
  
globals:
  - id: crop_zones
    type: std::string
    restore_value: true
    # initial_value: "\"[]\""
    initial_value: '"[[80, 233, 116, 307], [144, 235, 180, 307]]"'
    # Note: The outer quotes are escaped with single quotes + double quotes ("...")
    # "[[80, 233, 116, 307], [144, 235, 180, 307], [202, 234, 238, 308], [265, 233, 304, 306], [328, 232, 367, 311], [393, 231, 433, 310], [460, 235, 499, 311], [520, 235, 559, 342]]"


text_sensor:
  - platform: template
    name: "Crop Zones"  # Exposed to HA
    id: crop_zones_sensor
    #Update ESPHome when changed from HA
    on_value:
      then:
        - lambda: |-
            ESP_LOGI("crop_zones", "Received crop zones: %s", x.c_str());
            id(crop_zones) = x;  //Store in global var
            id(meter_reader).set_crop_zones(x);

api:
  services:
    - service: set_crop_zones
      variables:
        zones: string
      then:
        - text_sensor.template.publish:
            id: crop_zones_sensor
            state: !lambda 'return zones;'
        - lambda: |-
            id(crop_zones) = zones;  // Update global var
            id(meter_reader).set_crop_zones(zones);
  reboot_timeout: 0s # do not reboot if hassio connection is lost.
            
            
# sensor: # tflite output
    # - platform: template
      # id: tflite_output
      # name: tflite_ouptut
      # accuracy_decimals: 1
      # unit_of_measurement: '%'
      
      
  
meter_reader_tflite:
  id: meter_reader
  camera_id: ${id_prefix}espcam
  model: "dig-class100-0180-s2-q.tflite"  # Must be in same directory as YAML
  confidence_threshold: 0.7
  # tensor_arena_size: "512KB" # check_tflite_model.py gives : Total Arena Size: 415.08 KB (Approx. RAM needed for inference)
  update_interval: 60s
  debug: false
  debug_image: false
  debug_image_out_serial: false
  crop_zones_global: crop_zones  # Reference the global variables
  
# Define sensors separately using template sensors
sensor:
  - platform: template
    name: "Meter Reading"
    id: meter_value
    unit_of_measurement: "units"
    accuracy_decimals: 0
    icon: "mdi:counter"
    update_interval: 30s
    lambda: |-
      auto reader = id(meter_reader);
      if (reader != nullptr) {
        return reader->get_last_reading();
      }
      return 0.0;

  - platform: template
    name: "Meter Reading Confidence"
    id: meter_confidence
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:percent"
    update_interval: 30s
    lambda: |-
      auto reader = id(meter_reader);
      if (reader != nullptr) {
        return reader->get_last_confidence() * 100.0; // Convert to percentage
      }
      return 0.0;

packages:
  board: !include board_freenove_esp32-s3-n8r8.yaml
  # board: !include AI-On-The-Edge-Cam_Esp32-S3.yaml
  logger: !include logger.yaml 
  wifi: !include wifi.yaml
  # lan: !include lan.yaml # only for AI-On-The-Edge-Cam_Esp32-S3.yaml + wifi must be disabled
  time: !include time.yaml
  switch_others: !include switch_others.yaml
  sensor_others: !include sensor_others.yaml
  camera_options: !include camera_options.yaml
  esp32_camera: !include esp32_camera.yaml
  camera_webserver: !include camera_webserver.yaml
  globals: !include globals.yaml


